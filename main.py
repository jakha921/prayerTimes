import logging
from config import TOKEN
from about import about, iftar, saxarlik
from parse_html import get_prayer_times_for_today, get_prayer_times_for_tomorrow, get_prayer_times_for_three_days, get_prayer_times_for_week

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters import Command, Text


API_TOKEN = TOKEN

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


menu = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ë—É–≥—É–Ω–≥–∏ –∫—É–Ω —É—á—É–Ω"),
            KeyboardButton(text="E—Ä—Ç–∞–Ω–≥–∏ –∫—É–Ω —É—á—É–Ω"),
        ],
        [
            KeyboardButton(text="–£—á –∫—É–Ω —É—á—É–Ω"),
            KeyboardButton(text="–ù–∞–º–æ–∑–ª–∞—Ä —Ö–∞–∫–∏–¥–∞"),
        ],
        [
            KeyboardButton(text="–°–∞“≥–∞—Ä–ª–∏–∫, –æ“ì–∏–∑ —ë–ø–∏—à"),
            KeyboardButton(text="–ò—Ñ—Ç–æ—Ä–ª–∏–∫, –æ“ì–∏–∑ –æ—á–∏—à"),
        ],
    ],
    resize_keyboard=True
)


@dp.message_handler(commands=['start'])
async def show_menu(message: types.Message):
    await message.reply(
        f"–ê—Å—Å–∞–ª–æ–º—É –∞–ª–µ–π–∫—É–º!\n"
        f"–ú–µ–Ω —Å–∏–∑–≥–∞ –Ω–∞–º–æ–∑ –≤–∞–∫—Ç–ª–∞—Ä–∏–Ω–∏\n"
        f"–∞–π—Ç–∏–± —Ç—É—Ä—É–≤—á–∏ –±–æ—Ç –º–∞–Ω\n"
        f"(—Ö–æ–∑–µ—Ä—á–∞ –ù–∞–≤–æ–∏–π –≤–∞–∫—Ç–∏ –±–∏–ª–∞–Ω)\n\n"
        
        f"üëá–¢–∞–Ω–ª–∞–Ω–≥:", reply_markup=menu)


@dp.message_handler(Text(equals=["–ë—É–≥—É–Ω–≥–∏ –∫—É–Ω —É—á—É–Ω"]))
async def get_today(message: types.Message):
    today = get_prayer_times_for_today()
    await message.answer(f'–ë—É–≥—É–Ω :\n{today} ', parse_mode="Markdown")

@dp.message_handler(Text(equals=["E—Ä—Ç–∞–Ω–≥–∏ –∫—É–Ω —É—á—É–Ω"]))
async def get_tomorrow(message: types.Message):
    tomorrow = get_prayer_times_for_tomorrow()
    await message.answer(f'E—Ä—Ç–∞–Ω–≥–∏ :\n{tomorrow} ', parse_mode="Markdown")

@dp.message_handler(Text(equals=["–£—á –∫—É–Ω —É—á—É–Ω"]))
async def get_three_days(message: types.Message):
    await message.answer(get_prayer_times_for_three_days(), parse_mode="Markdown")

@dp.message_handler(Text(equals=["–ë–∏—Ä —Ö–∞—Ñ—Ç–∞ —É—á—É–Ω"]))
async def get_week(message: types.Message):
    await message.answer(get_prayer_times_for_week(), parse_mode="Markdown")

@dp.message_handler(Text(equals=["–°–∞“≥–∞—Ä–ª–∏–∫, –æ“ì–∏–∑ —ë–ø–∏—à"]))
async def get_three_days(message: types.Message):
    await message.answer(saxarlik, parse_mode="Markdown")

@dp.message_handler(Text(equals=["–ò—Ñ—Ç–æ—Ä–ª–∏–∫, –æ“ì–∏–∑ –æ—á–∏—à"]))
async def get_week(message: types.Message):
    await message.answer(iftar, parse_mode="Markdown"
    )

@dp.message_handler(Text(equals=["–ù–∞–º–æ–∑–ª–∞—Ä —Ö–∞–∫–∏–¥–∞"]))
async def get_week(message: types.Message):
    await message.answer(about, parse_mode="Markdown")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
